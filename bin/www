#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('migrator:server');
var http = require('http');
require('dotenv').config()
const axios = require('axios');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
const getEnvironmentVariables_old= async(list)=>{
  let listApp={"migrate":[],"check":[]};
  var promiseArray= list.map( async (project)=>{
    let environment= await  axios.get(process.env.BASE_URL+project.id+"/config-vars" || `https://api.heroku.com/apps/${project.id}/config-vars`, {
          headers:{
            Authorization:`Bearer ${process.env.TOKEN}`,
            Accept:'application/vnd.heroku+json; version=3'
          }
        })
        //console.log(environment.data);
        if('MONGODB_URI' in environment.data){
          console.log("da migrare");
          listApp["migrate"].push({...project,...environment.data});
          console.log(listApp)
        } else{
          console.log("controllare a mano");
          listApp["check"].push({...project,...environment.data});
          console.log(listApp);
        }
  })

  return listApp;
}

const getEnvironmentVariables= async(list)=>{
  
  var promiseArray= list.map( async (project)=>{
    return axios.get(process.env.BASE_URL+project.id+"/config-vars" || `https://api.heroku.com/apps/${project.id}/config-vars`, {
          headers:{
            Authorization:`Bearer ${process.env.TOKEN}`,
            Accept:'application/vnd.heroku+json; version=3'
          }
        }).then((request)=>{
          return {environment:request,project}
        })
  })

  return Promise.all(promiseArray).then(results=>{
    let listApp={"migrate":[],"check":[]};
    results.map(({environment,project})=>{
              //console.log(environment.data);
              if('MONGODB_URI' in environment.data){
                console.log("da migrare");
                listApp["migrate"].push({...project,...environment.data});
                //console.log(listApp)
              } else{
                console.log("controllare a mano");
                listApp["check"].push({...project,...environment.data});
                //console.log(listApp);
              }
    })
    console.log(listApp)
    return listApp
  })
}

const getHerokuApps=async ()=>{
  
  let filtered;
  let response= await axios.get(process.env.BASE_URL || "https://api.heroku.com/apps/", {
    headers:{
      Authorization:`Bearer ${process.env.TOKEN}`,
      Accept:'application/vnd.heroku+json; version=3'
    }
  })
  //console.log(response.data);
  // .catch(function (error) {
  //   console.log(error);
  // });
  filtered=response.data.map(app=>{
    return {
      name:app.name,
      id:app.id
    }
  });
  console.log(filtered);
 const lista= await getEnvironmentVariables(filtered);
 console.log("lista",lista);
  
  
      
  
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  getHerokuApps();
}


